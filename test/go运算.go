package main

// import "fmt"

var a int= 2
var b int= 2
var c int
func main() {
	//1. c = a + b
	// println(c)
	// c = a - b
	// println(c)
	// c = a * b
	// println(c)
	// c = a / b
	// println(c)
	// c = a % b
	// println(c)
	// a++
	// println(a)
	// a--
	// println(a)

	if(a == b){
		println(111)
	} else {
		println(222)

	}

	if( a >= b){
		println("a大于等于b")
	}else {
		println("a小于等于b")

	}

	var c bool= true
	var d bool= false
	//&&两边必须一致 false
	if(c && d){
		println(true)

	}else{
		println(false)

	}
	//  ||一边为true就为true  true
	if(c || d){
		println(true)
	}else{
		println(false)
	}

	// !否定符  true
	if (!(c && d)){
		println(true)

	}else{
		println(false)

	}
	//false
	if (!(c || d)){
		println(true)
	}else{
		println(false)
	}

	//1 	C 语言支持的位运算符如下表所示。假定 A 为60，B 为13：

	// 运算符	描述	实例
	// &	按位与运算符"&"是双目运算符。 其功能是参与运算的两数各对应的二进位相与。	(A & B) 结果为 12, 二进制为 0000 1100
	// |	按位或运算符"|"是双目运算符。 其功能是参与运算的两数各对应的二进位相或	(A | B) 结果为 61, 二进制为 0011 1101
	// ^	按位异或运算符"^"是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。	(A ^ B) 结果为 49, 二进制为 0011 0001
	// <<	左移运算符"<<"是双目运算符。左移n位就是乘以2的n次方。 其功能把"<<"左边的运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	A << 2 结果为 240 ，二进制为 1111 0000
	// >>	右移运算符">>"是双目运算符。右移n位就是除以2的n次方。 其功能是把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数。	A >> 2 结果为 15 ，二进制为 0000 1111

	// 2位运算符
	// 位运算符对整数在内存中的二进制位进行操作。

	// 下表列出了位运算符 &, |, 和 ^ 的计算：

	// p	q	p & q	p | q	p ^ q
	// 0	0	  0	      0		  0
	// 0	1	  0	      1		  1
	// 1	1	  1	      1		  0
	// 1	0	  0	      1		  1

	//3 	赋值运算符
	// 下表列出了所有Go语言的赋值运算符。

	// 运算符	描述	实例
	// =	简单的赋值运算符，将一个表达式的值赋给一个左值	C = A + B 将 A + B 表达式结果赋值给 C
	// +=	相加后再赋值	C += A 等于 C = C + A
	// -=	相减后再赋值	C -= A 等于 C = C - A
	// *=	相乘后再赋值	C *= A 等于 C = C * A
	// /=	相除后再赋值	C /= A 等于 C = C / A
	// %=	求余后再赋值	C %= A 等于 C = C % A
	// <<=	左移后赋值	C <<= 2 等于 C = C << 2
	// >>=	右移后赋值	C >>= 2 等于 C = C >> 2
	// &=	按位与后赋值	C &= 2 等于 C = C & 2
	// ^=	按位异或后赋值	C ^= 2 等于 C = C ^ 2
	// |=	按位或后赋值	C |= 2 等于 C = C | 2

}